# -*- coding: utf-8 -*-
"""Test_Project_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ck0G9MyD3A_1P2h5oiy_jdUI3U7E4kvt

This is a test project to get a simple Deep Learning model working with Colab
"""

import tensorflow as tf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from tensorflow.keras.utils import plot_model

"""Setup input and output tensors using a basic linear relationship"""

X=tf.constant(tf.range(1.,100.,2),dtype=np.float32)
input_len = len(X)
print(X)

Y=tf.constant(X+10)
print(Y)

#Setup training data using the first 75% of the data set
X_train = X[:int(input_len*0.75)]
Y_train = Y[:int(input_len*0.75)]
print(X_train)
print(Y_train)

#Use the remaining 25% of the data set for testing
X_test = X[int(input_len*0.75):]
Y_test = Y[int(input_len*0.75):]
print(X_test)
print(Y_test)

#Define a class to hold the model's predictions, this is used to plot and analyse the results 
class model_prediction:
  def __init__(self,values,plot_color,plot_label):
    self.values = values
    self.plot_color = plot_color
    self.plot_label = plot_label

#Create a reusable function to plot the training and test data and optionally also plot predictions
def plot_predictions(train_data, train_labels, test_data, test_labels, predictions=None):
    """
    Scatter plot of training data, test data and (optionally) predictions for comparison
    Predictions are a list of prediction instances from running model with different parameters
    """
    plt.figure(figsize=(10,7))
    plt.scatter(X_train, Y_train, color='blue', label='Training Data')
    plt.scatter(X_test, Y_test, color='green', label='Test Data')
    #If one or more predictions have been provided then iterate through them 
    #and plot them with the corresponding color and label
    if predictions is not None:
        for pred in predictions:
            plt.scatter(X_test, pred.values, color=pred.plot_color, label=pred.plot_label)
    #Show the plot with a legend
    plt.legend()
    plt.show()

#Plot the training and test data with no predictions
plot_predictions(X_train, Y_train, X_test, Y_test)


#set the random seed to ensure reproducibility
tf.random.set_seed(42)
#Setup the keras dense model using 2 layers
model_1=tf.keras.Sequential(name="test_model_1")
#model_1.add(tf.keras.layers.Dense(10,input_shape=[1],activation="relu", name="initial_layer"))
model_1.add(tf.keras.layers.Dense(20,input_shape=[1], name="initial_layer"))
model_1.add(tf.keras.layers.Dense(1, name="output_layer"))

#Compile the model with choices for loss, optimizer and metrics
model_1.compile(loss=tf.keras.losses.mae, optimizer=tf.keras.optimizers.SGD(learning_rate=0.001), metrics=['mae'])

#Show a summary of the model
model_1.summary()

#Run the model using training data
model_1.fit(X_train, Y_train, epochs=100, verbose=1)
 
#Predict the y values using the first model
Y_pred_1=model_1.predict(X_test)

#Create a list of model predictions and add the first model's predictions
model_predictions = []
model_pred = model_prediction(Y_pred_1, 'red', "Prediction: lr=" + str(model_1.optimizer.learning_rate.numpy()))
model_predictions.append(model_pred)
#Plot the first model's prediction together with the train and test data
plot_predictions(X_train, Y_train, X_test, Y_test, model_predictions)

#set the random seed to ensure reproducibility
tf.random.set_seed(42)
#Setup the keras dense model using 2 layers
model_2=tf.keras.Sequential(name="test_model_2")
model_2.add(tf.keras.layers.Dense(100,input_shape=[1], name="initial_layer"))
model_2.add(tf.keras.layers.Dense(1, name="output_layer"))

#Compile the model with choices for loss, optimizer and metrics
model_2.compile(loss=tf.keras.losses.mae, optimizer=tf.keras.optimizers.SGD(learning_rate=0.0011), metrics=['mae'])

#Run the model using training data
model_2.fit(X_train, Y_train, epochs=100, verbose=0)

#Predict the y values using the second model
Y_pred_2=model_2.predict(X_test)
#Add the second model's predictions
model_pred = model_prediction(Y_pred_2, 'orange', "Prediction: lr=" + str(model_2.optimizer.learning_rate.numpy()))
model_predictions.append(model_pred)
#Plot the second model's prediction together with the train and test data
plot_predictions(X_train, Y_train, X_test, Y_test, model_predictions)

#set the random seed to ensure reproducibility
tf.random.set_seed(42)
#Setup the keras dense model using 2 layers
model_3=tf.keras.Sequential(name="test_model")
model_3.add(tf.keras.layers.Dense(100,input_shape=[1], name="initial_layer"))
model_3.add(tf.keras.layers.Dense(1, name="output_layer"))

#Compile the model with choices for loss, optimizer and metrics
model_3.compile(loss=tf.keras.losses.mae, optimizer=tf.keras.optimizers.SGD(learning_rate=0.0012), metrics=['mae'])

#Run the model using training data
model_3.fit(X_train, Y_train, epochs=100, verbose=0)

#Predict the y values using the third model
Y_pred_3=model_3.predict(X_test)
#Add the second model's predictions
model_pred = model_prediction(Y_pred_3, 'purple', "Prediction: lr=" + str(model_3.optimizer.learning_rate.numpy()))
model_predictions.append(model_pred)
#Plot the third model's prediction together with the train and test data and other predictions
plot_predictions(X_train, Y_train, X_test, Y_test, model_predictions)